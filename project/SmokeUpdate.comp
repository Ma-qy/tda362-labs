#version 450 core
// ----------consts----------
const float gDeltaT = 8e-4;
const float gEps = 1e-5;
const float gMaxVelocity = 100.0;
const float gVelocityAttenuation = 0.5;
//const float gVelocityAttenuation = 0.001;  //for smoke




//  ----------uniform----------
uniform uint pass;
uniform uint gLocalSize;

uniform uvec3 blockNum;
uniform int particalNum;
uniform vec3 blockSize;
uniform vec3 containerLowerBound;
uniform vec3 containerUpperBound;
uniform int blockIdOffs[27];

uniform float gGravity;
uniform float gSupportRadius;
uniform vec3 gGravityDir;
uniform float gDensity0;
uniform float gVolume;
uniform float gMass;
uniform float gStiffness;
uniform float gExponent;
uniform float gViscosity;

uniform vec3 gExternelAccleration;

uniform vec3 Random;

// local size
layout (local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

// ----------structs----------
struct ParticalInfo3d {
    vec3 position;
    vec3 velosity;
    vec3 accleration;
    highp float density;
    highp float pressure;
    highp float pressDivDens2;
    highp uint blockId;
};

struct NeighborInfo {
    vec3 radiusIj;
    float distanceIj;
    int neighborId;
};


// ----------buffers----------
layout(std140, binding=4) buffer ParticalInfos
{
    ParticalInfo3d particals[];
};

layout(binding=5) buffer BlockExtens
{
    uvec2 blockExtens[];
};


layout(rgba32f, binding = 0) uniform image2D imgOutput;

uniform sampler1D kernelBuffer;

// ----------functions----------
void EulerIntegration(inout ParticalInfo3d pi) {
    pi.velosity = pi.velosity + gDeltaT * pi.accleration;
    pi.velosity = clamp(pi.velosity, vec3(-gMaxVelocity), vec3(gMaxVelocity));    // 速度限制
    pi.position = pi.position + gDeltaT * pi.velosity;
}

void ComputeDensityAndPress(inout ParticalInfo3d pi) {
    uint particalId = gl_GlobalInvocationID.x;

    for (int i = 0; i < blockIdOffs.length(); i++) {     // for all neighbor block
        uint bIdj = pi.blockId + blockIdOffs[i];
        for(uint j = blockExtens[bIdj].x; j < blockExtens[bIdj].y; j++) {   // for all neighbor particals
            vec3 radiusIj = pi.position - particals[j].position;
            float diatanceIj = length(radiusIj);
            if (particalId != j && diatanceIj <= gSupportRadius) {
                pi.density += texture(kernelBuffer, diatanceIj / gSupportRadius).r;
            }
        }
    }
    pi.density *= (gVolume * gDensity0);
    pi.density = max(pi.density, gDensity0);
    //pi.pressure = gStiffness * (pow(pi.density / gDensity0, gExponent) - 1.0);
    pi.pressure = gStiffness * (pi.density - gDensity0);
    pi.pressDivDens2 = pi.pressure / pow(pi.density, 2);
}

void ComputeAccleration(inout ParticalInfo3d pi) {
    uint particleId = gl_GlobalInvocationID.x;
    if (particleId >= particalNum) {
        return;
    }

    vec3 buoyancyForce = vec3(0.0);
    vec3 repulsionForce = vec3(0.0);
    vec3 randomForce = vec3(0.0);

    float ambientDensity = 1.225; // Assuming ambient density of air is 1.0
    float repulsionStrength = 0.2; // Adjust strength of repulsion force
    float randomStrength = 0.5; // Adjust strength of random motion

    for (int i = 0; i < blockIdOffs.length(); i++) {
        uint bIdj = pi.blockId + blockIdOffs[i];
        for (uint j = blockExtens[bIdj].x; j < blockExtens[bIdj].y; j++) {
            if (particleId != j) {
                vec3 radiusIj = pi.position - particals[j].position;
                float distanceIj = length(radiusIj);
                if (distanceIj <= gSupportRadius) {
                    // Compute repulsion force to prevent sticking
                    float strength = exp(-distanceIj / gSupportRadius); // Exponential decay based on distance
                    repulsionForce += normalize(radiusIj) * strength * repulsionStrength;
                }
            }
        }
    }

    // Compute buoyancy force
    //vec3 gravity = vec3(0.0, -9.81, 0.0); // Gravity vector
    float smokeDensity = pi.density; // Smoke density at the particle's position
    float buoyancyStrength = 2.0; // Adjust based on the simulation needs
    buoyancyForce = buoyancyStrength * (smokeDensity - ambientDensity) * gGravity * gGravityDir;

    // Add a small random motion to each particle
    vec3 randomDirection = vec3(
        fract(sin(dot(vec2(particleId, pi.position.x), vec2(12.9898, 78.233))) * 43758.5453),
        fract(sin(dot(vec2(particleId, pi.position.y), vec2(12.9898, 78.233))) * 43758.5453),
        fract(sin(dot(vec2(particleId, pi.position.z), vec2(12.9898, 78.233))) * 43758.5453)
    );
    randomForce = randomDirection * randomStrength;

    // Update acceleration
    pi.accleration += buoyancyForce + repulsionForce;
}

void BoundaryCondition(inout ParticalInfo3d pi) {
    bool invFlag = false; 

    if (pi.position.x <= containerLowerBound.x + gSupportRadius) {
        pi.velosity.x = abs(pi.velosity.x);
        invFlag = true;
    }

    if (pi.position.y <= containerLowerBound.y + gSupportRadius) {
        pi.velosity.y = abs(pi.velosity.y);
        invFlag = true;
    }

    if (pi.position.z <= containerLowerBound.z + gSupportRadius) {
        pi.velosity.z = abs(pi.velosity.z);
        invFlag = true;
    }

    if (pi.position.x >= containerUpperBound.x - gSupportRadius) {
        pi.velosity.x = -abs(pi.velosity.x);
        invFlag = true;
    }

    if (pi.position.y >= containerUpperBound.y - gSupportRadius) {
        pi.velosity.y = -abs(pi.velosity.y);
        invFlag = true;
    }

    if (pi.position.z >= containerUpperBound.z - gSupportRadius) {
        pi.velosity.z = -abs(pi.velosity.z);
        invFlag = true;
    }

    if (invFlag) {
        pi.velosity *= gVelocityAttenuation;
    }

    //pi.position = clamp(pi.position, containerLowerBound + vec3(gSupportRadius + gEps), containerUpperBound - vec3(gSupportRadius + gEps));
    pi.position = clamp(pi.position, containerLowerBound + vec3(gSupportRadius + gEps), containerUpperBound - vec3(gSupportRadius + gEps));
    pi.velosity = clamp(pi.velosity, vec3(-gMaxVelocity), vec3(gMaxVelocity));    // 速度限制
}

void CalculateBlockId(inout ParticalInfo3d pi) {
    vec3 deltePos = pi.position - containerLowerBound;
    uvec3 blockPosition = uvec3(floor(deltePos / blockSize));
    pi.blockId = blockPosition.z * blockNum.x * blockNum.y + blockPosition.y * blockNum.x + blockPosition.x;
}

// ----------main----------
void main() {
    uint particalId = gl_GlobalInvocationID.x;

    if (pass == 0) {
        ComputeDensityAndPress(particals[particalId]);
    }
    else if (pass == 1) {
        particals[particalId].accleration = gExternelAccleration + gGravity * gGravityDir;
        ComputeAccleration(particals[particalId]);
        EulerIntegration(particals[particalId]);
        BoundaryCondition(particals[particalId]);
        CalculateBlockId(particals[particalId]);
    }

    imageStore(imgOutput, ivec2(particalId % 100, particalId / 100), vec4(1.0, 1.0, 0.0, 1.0));
    return;
}

